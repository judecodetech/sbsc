upstream sbsc {
    server 127.0.0.1 weight=1 fail_timeout=300s;
}

server {
    listen 80;


    # Strict Transport Security
    add_header Strict-Transport-Security max-age=2592000;

    rewrite        ^ https://$server_name$request_uri? permanent;
    #  http://www.cyberciti.biz/faq/linux-unix-nginx-redirect-all-http-to-https/
    server_name   sbsc.serthe.com;
}

server {
    # server port and name
    server_name sbsc.serthe.com;

    # Specifies the maximum accepted body size of a client request,
    # as indicated by the request header Content-Length.
    client_max_body_size 200m;

    include /etc/nginx/ssl/sbsc-ssl.conf;

    # increase proxy buffer to handle some OpenERP web requests
    proxy_buffers 16 64k;
    proxy_buffer_size 128k;

    location / {
        proxy_pass    http://sbsc;
        # force timeouts if the backend dies
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;

        # set headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;

        # Let the Django web service know that we're using HTTPS, otherwise
        # it will generate URL using http:// and not https://
        proxy_set_header X-Forwarded-Proto https;

        # by default, do not forward anything
        proxy_redirect off;


        proxy_connect_timeout 159s;
        proxy_send_timeout   600;
        proxy_read_timeout   600;
    }

    # cache some static data in memory for 60mins.
    # under heavy load this should relieve stress on the Django web interface a bit.
    location ~* /web/static/ {
        proxy_cache_valid 200 60m;
        proxy_buffering    on;
        expires 864000;
        proxy_pass http://sbsc;
    }
    
}
